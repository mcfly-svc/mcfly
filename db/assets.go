// Code generated by go-bindata.
// sources:
// db/migrations/0001_init_db.down.sql
// db/migrations/0001_init_db.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_init_dbDownSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\xca\xcf\x4a\x4d\x2e\x89\x2f\x4e\x2d\x2a\xcb\x4c\x4e\x8d\x2f\x05\x32\xf2\x12\x73\x53\xe3\x41\x84\x35\x17\x2e\x3d\x65\x99\x29\xa9\x45\x89\xc9\xc9\xa9\xc5\xc5\x25\xf9\xd9\xa9\x79\x60\x7d\xb8\x95\x83\xad\xc8\x48\xcc\x4b\xc9\x49\x8d\x87\xe9\xb6\xe6\x82\x28\x0f\x71\x74\xf2\x71\x45\x52\x9e\x54\x9a\x99\x93\x62\x8d\x5d\x0e\x64\x4b\x3c\xd4\x3c\x1c\x4a\x08\xca\x82\x2d\x8f\x87\xb8\x3d\x1e\xec\x78\x1c\x6a\x73\x13\x8b\x8a\x4b\x0b\x32\xa1\x5e\x83\xaa\x89\x0c\xc0\x66\x9c\x35\x17\x20\x00\x00\xff\xff\x6e\xb7\x15\xa4\x5d\x01\x00\x00")

func dbMigrations0001_init_dbDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbDownSql,
		"db/migrations/0001_init_db.down.sql",
	)
}

func dbMigrations0001_init_dbDownSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.down.sql", size: 349, mode: os.FileMode(420), modTime: time.Unix(1463002691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_init_dbUpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcd\x6e\xba\x40\x10\x3f\xc3\x53\xcc\x0d\x4c\x78\x83\xff\x89\x3f\x4e\x13\x53\xa5\x16\x35\xa9\x27\x82\xb0\xd1\x55\x04\xb3\x1f\xc6\xc7\x2f\xbb\xb0\x80\x82\x8d\x2d\x27\x76\x67\xf6\xf7\x35\x13\x44\xe8\xaf\x11\xd6\xdb\x25\xc2\x85\x95\x57\x9a\x11\x06\xfe\x0a\x30\xdc\x2c\xc0\x75\xf6\x54\x1c\xe4\xce\xf1\xc0\xc9\x58\x79\xd9\x95\x37\xf5\x2b\x58\x72\xa5\x5c\xfd\x1d\x49\x71\xa2\x05\x77\x26\xff\x6c\xdb\x20\xf9\xff\xe7\x08\xe7\x84\x71\x79\xa1\xb1\xe4\x15\x9c\x6b\x5b\x34\xb3\xba\xaf\xba\xa3\x49\x0e\xcb\x68\xb6\xf0\xa3\x2d\xbc\xe3\xd6\xb3\xad\x22\x39\x93\xae\x45\x90\x9b\xa8\x2e\x93\x34\x25\x9c\xc7\xa2\x3c\x91\xa2\x2b\xd8\x03\x3a\xa3\x3c\xee\x3f\x50\xbc\xa6\x60\x70\xcd\xd9\xeb\x4a\x5a\xa3\x62\x87\x71\x5e\xe8\x2b\x02\x4b\x75\xc7\x3d\x3b\xb4\x10\x64\x5f\x99\x8c\xf0\x0d\x23\x0c\x03\x5c\xdd\x99\x77\x69\x36\x51\x7a\x1b\xb9\x9b\x70\xf6\xb9\x41\x98\x85\x53\xfc\x6a\x55\xd7\x6c\x9a\xac\x0e\xec\x23\x7c\xe6\xa8\xd5\x0f\x8d\x8e\xb1\x28\x8e\x24\x15\xaf\x85\x7e\x48\x8a\x2c\x27\x8f\xa9\xf3\x52\xb2\x94\xc4\x92\xe5\xa3\xf7\x77\x99\x9a\xc3\x0f\x1e\x95\x9c\xb8\x66\x6a\xdf\x36\x16\x6b\xa5\x75\xcd\x83\x07\xfc\x81\xb5\x9d\xa4\x79\xf6\x9a\x31\x43\xdb\x76\x8e\x8c\xa9\xe9\x51\x13\xd2\x51\xf0\xc3\x60\xff\x34\xe3\x73\xc3\xf7\xf2\xf4\x44\x7a\xf1\xff\x61\x53\x54\x2c\x53\x9c\x63\x85\x19\xf8\xab\xc0\x9f\xe2\xef\xbd\x8c\x62\xf4\xd2\x01\xb7\x11\xe6\x41\x87\xac\x77\xf4\x3b\x00\x00\xff\xff\xd1\xc8\x54\x37\x0c\x04\x00\x00")

func dbMigrations0001_init_dbUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbUpSql,
		"db/migrations/0001_init_db.up.sql",
	)
}

func dbMigrations0001_init_dbUpSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.up.sql", size: 1036, mode: os.FileMode(420), modTime: time.Unix(1463002681, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_init_db.down.sql": dbMigrations0001_init_dbDownSql,
	"db/migrations/0001_init_db.up.sql": dbMigrations0001_init_dbUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_init_db.down.sql": &bintree{dbMigrations0001_init_dbDownSql, map[string]*bintree{}},
			"0001_init_db.up.sql": &bintree{dbMigrations0001_init_dbUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

