// Code generated by go-bindata.
// sources:
// db/migrations/0001_init_db.down.sql
// db/migrations/0001_init_db.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_init_dbDownSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\x4d\x0a\xc2\x30\x14\x84\xf7\x3d\x45\xee\x91\x95\xd2\x0a\x05\xd1\x62\xbb\xa8\xab\x47\x4c\x9e\x58\x4d\x93\x92\x9f\x42\x6f\xaf\x4d\x23\xb8\x48\x70\x13\x02\xf3\xcd\x9b\x99\xf2\x72\x6e\x48\x7d\x2a\xab\x9e\xd4\x07\x52\xf5\x75\xdb\xb5\x64\x32\xfa\x89\xdc\x81\x45\x33\x0f\x1c\xc1\x7f\x3e\x8a\x8d\x08\xeb\x43\x8b\x9c\x67\x1e\x04\x1a\xc6\x39\x5a\xeb\xf4\x0b\x55\xf0\xe5\xf1\x10\xf1\x60\x4a\x48\x84\xaf\x9b\x16\x1b\xde\xed\xf6\xc7\xea\x07\xbf\xf9\x41\x0a\x9a\xd6\xd6\x14\x88\xf7\x32\xc8\x5f\x35\x84\xc3\xd6\x1d\x42\xf9\x0c\x3b\xf2\xbb\x5c\xe2\xb0\x48\x5c\x9b\xd4\x31\x9a\x54\xc3\x0e\x10\x38\x49\xbd\x80\x75\xcc\x79\x4b\x8b\x77\x00\x00\x00\xff\xff\x48\x58\xbc\x97\x84\x01\x00\x00")

func dbMigrations0001_init_dbDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbDownSql,
		"db/migrations/0001_init_db.down.sql",
	)
}

func dbMigrations0001_init_dbDownSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.down.sql", size: 388, mode: os.FileMode(420), modTime: time.Unix(1464741236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_init_dbUpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xcd\x8e\xba\x30\x10\x3f\xc3\x53\xcc\x0d\x4c\x78\x83\xff\x89\x3f\x76\x13\xb3\xca\xba\xa8\xc9\x7a\x6a\x90\x56\xad\xd6\x42\x68\x31\xfa\xf6\xdb\xf2\xad\xb2\x66\x37\x91\x53\x99\x99\xfe\x3e\x66\xa6\x41\x84\xfc\x25\x82\xe5\x7a\x8e\x20\xcb\xd3\x33\x23\x34\x07\x7f\x01\x28\x5c\xcd\xc0\x75\x76\x4c\xed\x8b\x8d\xe3\x81\x43\xf2\x34\xdb\xa4\x17\x73\x54\x79\x7c\x66\xd2\x9c\x0e\x54\x1c\x99\x90\xce\xe8\x9f\xdd\x07\xda\x14\x8c\x13\x4c\x68\xc6\xd3\x2b\x96\x2a\x56\x85\x6c\x30\x5d\x47\x16\x49\x42\x29\xa1\xc4\x00\x64\x54\x10\x26\x76\xe6\xb8\x8d\x19\xd7\x41\x0d\xd5\x62\xf9\xff\xa7\x08\x4e\xc9\x96\x5f\x71\x21\xb5\x2e\xd7\xb6\x18\xb1\xba\x4f\xc7\x58\xcc\x61\x1e\x4d\x66\x7e\xb4\x86\x77\xb4\xf6\x6c\x4b\xc4\x27\xda\x95\x28\x7a\x51\x3a\x18\x6b\x4e\x29\xb1\x4a\x8f\x54\x74\x09\xfb\x81\xac\x69\x01\xee\x5f\x30\xbc\x4d\xa2\xc1\x6d\xfe\xbd\x2e\x55\x6a\x34\xec\x30\xcc\x0b\x7d\x45\x60\x99\x6a\xdc\xb3\xc3\x84\xa2\x3b\x6d\x32\x42\x6f\x28\x42\x61\x80\x16\x3d\xeb\x2e\x23\x23\xf8\x08\x61\x8c\xa6\x48\x8b\x0d\xfc\x45\xe0\x8f\x91\xdd\xf5\x7d\x15\x4e\x3e\x57\x08\x26\xe1\x18\x7d\xb5\x2e\x2a\xf6\x92\xbc\x6a\xa0\x46\xf8\xc1\x61\xeb\x07\x6a\x5d\x43\xad\x39\xd0\x44\xfd\x6e\x08\xfb\x58\x10\x4e\xef\xa7\x20\xd3\x22\x4f\x28\x2e\x72\x3e\x18\xbf\xe9\x71\xf3\xf3\xc4\xa3\x91\x83\x2b\xa6\xf6\x6e\x6d\xb1\x52\x5a\xe5\x3c\xb8\xc3\x7f\xb0\x56\xee\xeb\x5f\x8c\xc1\xbd\xb3\x46\x4d\x0b\x30\x30\xcd\xba\x66\x78\x94\x1a\xe3\xf6\xbd\x94\x28\x03\x0f\xe9\x66\xe1\x72\x0e\x00\x4f\xd6\xb9\x9c\x65\x6f\x70\x2f\xd8\xb9\x17\x99\xed\x75\x15\xdc\x5a\x96\x07\x1d\xf2\xc8\x98\xf9\x0e\x00\x00\xff\xff\x50\xe2\x4e\x34\x9d\x04\x00\x00")

func dbMigrations0001_init_dbUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbUpSql,
		"db/migrations/0001_init_db.up.sql",
	)
}

func dbMigrations0001_init_dbUpSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.up.sql", size: 1181, mode: os.FileMode(420), modTime: time.Unix(1464741236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_init_db.down.sql": dbMigrations0001_init_dbDownSql,
	"db/migrations/0001_init_db.up.sql": dbMigrations0001_init_dbUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_init_db.down.sql": &bintree{dbMigrations0001_init_dbDownSql, map[string]*bintree{}},
			"0001_init_db.up.sql": &bintree{dbMigrations0001_init_dbUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

