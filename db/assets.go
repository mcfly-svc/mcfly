// Code generated by go-bindata.
// sources:
// db/migrations/0001_init_db.down.sql
// db/migrations/0001_init_db.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_init_dbDownSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\xca\xcf\x4a\x4d\x2e\x89\x2f\x4e\x2d\x2a\xcb\x4c\x4e\x8d\x2f\x05\x32\xf2\x12\x73\x53\xe3\x41\x84\x35\x17\x2e\x3d\x65\x99\x29\xa9\x45\x89\xc9\xc9\xa9\xc5\xc5\x25\xf9\xd9\xa9\x79\x60\x7d\xb8\x95\x83\xad\xc8\x48\xcc\x4b\xc9\x49\x8d\x87\xe9\xb6\xe6\x82\x28\x0f\x71\x74\xf2\x71\x45\x52\x9e\x54\x9a\x99\x93\x62\x8d\x5d\x0e\x64\x4b\x3c\xd4\x3c\x1c\x4a\x08\xca\x82\x2d\x8f\x87\xb8\x3d\x1e\xec\x78\x1c\x6a\x73\x13\x8b\x8a\x4b\x0b\x32\xa1\x5e\x83\xaa\x89\x0c\xc0\x66\x9c\x35\x17\x20\x00\x00\xff\xff\x6e\xb7\x15\xa4\x5d\x01\x00\x00")

func dbMigrations0001_init_dbDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbDownSql,
		"db/migrations/0001_init_db.down.sql",
	)
}

func dbMigrations0001_init_dbDownSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.down.sql", size: 349, mode: os.FileMode(420), modTime: time.Unix(1463002691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_init_dbUpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xcf\x8e\xb2\x30\x14\xc5\xd7\xf0\x14\x77\x07\x26\xbc\xc1\xb7\xe2\xc3\x3b\x89\x19\x65\x1c\xd4\x64\x5c\x11\x84\x46\xab\x58\x4c\xff\x18\x1f\x7f\x5a\xa1\x80\x8a\x93\x99\x44\x56\x6d\x6f\x7b\xce\xf9\xdd\x4b\x94\x60\xb8\x44\x58\xae\xe7\x08\x27\x5e\x9d\x69\x41\x38\x84\x0b\xc0\x78\x35\x03\xdf\xdb\x52\xb9\x53\x1b\x2f\x00\xaf\xe0\xd5\x69\x53\x5d\xcc\x52\xf2\xec\x4c\x85\x59\xed\x09\x3b\x50\x26\xbc\xd1\x3f\xd7\xb5\x4a\xe1\xff\x29\xc2\x31\xe3\x42\x9d\x68\xaa\x84\x96\xf3\x5d\x87\x16\x4e\xf7\xe9\x33\x9a\x95\x30\x4f\x26\xb3\x30\x59\xc3\x3b\xae\x03\xd7\x61\xd9\x91\x74\x57\x24\xb9\x48\x7d\x98\xe5\x39\x11\x22\x95\xd5\x81\xb0\xae\xe0\x3e\xd8\xd9\xe4\x69\xff\x81\xf1\xb5\x05\xab\x6b\xf7\x41\x57\xba\x66\x34\xee\x30\xec\x0b\xfd\x44\xe0\x98\xdb\x69\x0f\x87\x32\x49\xb6\x1a\x32\xc1\x37\x4c\x30\x8e\x70\x71\x03\xef\xd3\x62\x04\x1f\x31\x8c\x71\x8a\x3a\x6e\x14\x2e\xa2\x70\x8c\x86\xa0\x01\x58\xc5\x93\xcf\x15\xc2\x24\x1e\xe3\x57\xcb\x51\xfb\x5f\xed\xeb\x16\x6a\x85\x27\x8c\x2d\x11\x34\xc9\x86\x9a\xb3\x27\xb9\xfc\xdd\x18\x76\x19\x2b\x4a\x72\x3f\x07\x51\x29\x9e\x93\x54\xf1\x72\xf0\xfc\xa6\xcb\x76\xf3\x03\xa3\x89\x93\xd6\x4e\xed\xdb\x06\xb1\x4e\x5a\xd7\x02\xb8\xd3\x7f\x40\xdb\x28\x5a\x16\x7f\x01\x83\x7b\x32\x9b\xa6\x15\x18\x98\x67\x73\xe7\xf9\x28\x6f\x43\x5d\xe7\xd0\x6b\xfa\x4b\xfe\x98\x57\x44\xd5\x1a\xbd\x9e\x80\xdf\x04\x0b\xa0\x53\x1e\x19\x9c\xef\x00\x00\x00\xff\xff\x73\xb2\x6d\x73\x14\x04\x00\x00")

func dbMigrations0001_init_dbUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbUpSql,
		"db/migrations/0001_init_db.up.sql",
	)
}

func dbMigrations0001_init_dbUpSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.up.sql", size: 1044, mode: os.FileMode(420), modTime: time.Unix(1463167509, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_init_db.down.sql": dbMigrations0001_init_dbDownSql,
	"db/migrations/0001_init_db.up.sql": dbMigrations0001_init_dbUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_init_db.down.sql": &bintree{dbMigrations0001_init_dbDownSql, map[string]*bintree{}},
			"0001_init_db.up.sql": &bintree{dbMigrations0001_init_dbUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

