// Code generated by go-bindata.
// sources:
// db/migrations/0001_init_db.down.sql
// db/migrations/0001_init_db.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_init_dbDownSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\xca\xcf\x4a\x4d\x2e\x89\x2f\x4e\x2d\x2a\xcb\x4c\x4e\x8d\x2f\x05\x32\xf2\x12\x73\x53\xe3\x41\x84\x35\x17\x2e\x3d\x65\x99\x29\xa9\x45\x89\xc9\xc9\xa9\xc5\xc5\x25\xf9\xd9\xa9\x79\x60\x7d\xd6\x5c\x10\xf5\x21\x8e\x4e\x3e\xae\x48\xea\x93\x4a\x33\x73\x52\xac\xb1\xcb\x81\xf4\xc5\x43\x1d\x81\x43\x09\x41\x59\xb0\x63\xe2\x21\xae\x89\x07\x3b\x07\x87\xda\xdc\xc4\xa2\xe2\xd2\x82\x4c\x54\xc7\x46\x06\x60\x33\xce\x9a\x0b\x10\x00\x00\xff\xff\xa2\x6a\x6e\x7d\x2f\x01\x00\x00")

func dbMigrations0001_init_dbDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbDownSql,
		"db/migrations/0001_init_db.down.sql",
	)
}

func dbMigrations0001_init_dbDownSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.down.sql", size: 303, mode: os.FileMode(420), modTime: time.Unix(1462573876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_init_dbUpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x4f\x8f\xb2\x30\x10\x87\xcf\xf0\x29\xe6\x06\x26\x7c\x83\xf7\xc4\xeb\xce\x26\x66\x57\xd6\x45\x4d\xd6\x13\xa9\xb4\xd1\xfa\xa7\x98\xb6\x18\x3f\xfe\xd2\x0a\xb6\x04\x36\x31\x7a\xaa\xed\x30\xbf\x67\x9e\x76\x9a\x63\xba\x42\x58\x6d\x16\x08\x17\x59\x5d\x39\x65\x12\xd2\x25\x60\xb6\x9e\x43\x1c\xed\xb8\xde\xd7\xdb\x28\x81\x88\xca\xea\xb2\xad\x6e\x66\xa9\x25\xb9\x72\x65\x56\x07\x26\x8e\x5c\xa8\x68\xf2\x2f\x0c\xbb\x4e\xe9\xff\x4f\x84\x33\x91\xaa\xbe\xf0\xa2\x56\x4d\xbb\x38\x0c\x38\x0d\xdc\xaf\xd9\xe3\xe4\x04\x8b\x7c\x36\x4f\xf3\x0d\x7c\xe0\x26\x09\x03\x41\xce\xcc\x95\x68\x76\xd3\xcd\x26\x29\x4b\xa6\x54\xa1\xab\x23\x13\xee\x20\x1c\xc4\x75\xe4\x85\xff\x81\xc9\xed\x0e\xba\xbe\xdd\xff\xc4\x1d\x59\x46\x93\x0e\xe3\xb9\xe0\x13\x41\x60\xaa\x0b\x6f\x1c\x2e\x34\xdb\x35\x43\xe6\xf8\x8e\x39\x66\x53\x5c\xf6\x86\x8f\x39\x9d\x18\xde\x16\x77\x9d\xcd\xbe\xd7\x08\xb3\xec\x0d\x7f\x1e\xd4\xf7\x34\x1b\x76\x17\xf6\x95\xfd\x35\xd1\x83\x1f\x5a\x8e\x31\x15\x07\x56\xea\xe7\xa4\xab\xaa\x96\x25\x2b\x7a\x96\x3c\x45\x7b\x22\xe8\x89\xf5\x2e\x65\xe8\x7e\x5b\xf3\x13\x7d\x2e\xae\x65\x73\xfa\x46\xe4\xb5\x35\xc6\x9b\x25\x50\xfb\xc1\xab\xb0\x89\xe3\xd0\x43\x3c\xeb\xc9\x93\xf2\xc2\xfd\xbd\x44\xee\x4d\x0e\x71\x1b\x9a\x80\xeb\x63\x5f\xc5\x6f\x00\x00\x00\xff\xff\x97\xd8\x31\x30\x7e\x03\x00\x00")

func dbMigrations0001_init_dbUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbUpSql,
		"db/migrations/0001_init_db.up.sql",
	)
}

func dbMigrations0001_init_dbUpSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.up.sql", size: 894, mode: os.FileMode(420), modTime: time.Unix(1462573884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_init_db.down.sql": dbMigrations0001_init_dbDownSql,
	"db/migrations/0001_init_db.up.sql": dbMigrations0001_init_dbUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_init_db.down.sql": &bintree{dbMigrations0001_init_dbDownSql, map[string]*bintree{}},
			"0001_init_db.up.sql": &bintree{dbMigrations0001_init_dbUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

