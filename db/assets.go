// Code generated by go-bindata.
// sources:
// db/migrations/0001_init_db.down.sql
// db/migrations/0001_init_db.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_init_dbDownSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\xca\xcf\x4a\x4d\x2e\x89\x2f\x4e\x2d\x2a\xcb\x4c\x4e\x8d\x2f\x05\x32\xf2\x12\x73\x53\xe3\x41\x84\x35\x17\x2e\x3d\x65\x99\x29\xa9\x45\x89\xc9\xc9\xa9\xc5\xc5\x25\xf9\xd9\xa9\x79\x60\x7d\xd6\x5c\x10\xf5\x21\x8e\x4e\x3e\xae\x48\xea\x93\x4a\x33\x73\x52\xac\xb1\xcb\x81\xf4\xc5\x43\x1d\x81\x43\x09\x41\x59\xb0\x63\xe2\x21\xae\x89\x07\x3b\x07\x87\xda\xdc\xc4\xa2\xe2\xd2\x82\x4c\x54\xc7\x46\x06\x60\x33\xce\x9a\x0b\x10\x00\x00\xff\xff\xa2\x6a\x6e\x7d\x2f\x01\x00\x00")

func dbMigrations0001_init_dbDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbDownSql,
		"db/migrations/0001_init_db.down.sql",
	)
}

func dbMigrations0001_init_dbDownSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.down.sql", size: 303, mode: os.FileMode(420), modTime: time.Unix(1462573876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_init_dbUpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x6e\x82\x40\x10\xc6\xcf\xf0\x14\x73\x03\x13\xde\xa0\x27\x8a\xd3\xc4\x54\xa9\x45\x4d\xea\x89\x20\x6c\x74\x15\xc1\xec\x1f\xe3\xe3\x77\x77\x65\x5d\xac\x34\xb1\xe5\xb4\x3b\x33\xcc\xf7\x9b\x6f\x36\xc9\x30\x5e\x22\x2c\xd7\x73\x84\x13\x6b\xcf\xb4\x22\x0c\xe2\x05\x60\xba\x9a\x41\x18\x6c\xa9\xd8\xc9\x4d\x10\x41\x50\xb1\xf6\xb4\x69\x2f\xfa\x28\x58\x71\xa6\x5c\x9f\xf6\xa4\x39\xd0\x86\x07\xa3\x17\xdf\xb7\x9d\xe2\xd7\x29\xc2\xb1\x60\x5c\x9e\x68\x2e\xb9\x6a\x17\xfa\x1e\xad\x3c\xf7\xa9\x18\x2d\x6a\x98\x67\x93\x59\x9c\xad\xe1\x1d\xd7\x91\xef\x35\xc5\x91\xb8\x12\x41\x2e\x42\x05\x8b\xb2\x24\x9c\xe7\xa2\x3d\x90\xc6\x25\xfc\x07\x39\x4b\x9e\xf7\x7f\xd0\xba\x36\x61\xfb\xda\x7b\xe4\x52\x86\x51\xab\xc3\xb0\x2e\xf4\x89\xc0\xd3\xd5\x79\x6f\x1c\xda\x08\xb2\x55\x43\x66\xf8\x86\x19\xa6\x09\x2e\xee\x86\x0f\x69\x35\xd2\xbc\x1d\xee\x2a\x9d\x7c\xae\x10\x26\xe9\x18\xbf\x6e\xd4\x57\x35\x23\x76\x35\xec\x23\xfd\x6d\xa2\x1b\x3f\x74\x1c\x43\x56\xec\x49\x29\x9e\x33\x7d\x57\x34\x55\x4d\x7e\xba\xce\x5b\xc9\x4a\x92\x4b\x56\x0f\xc6\xef\x3c\xb5\x97\xc7\x9d\x6c\x24\xad\xab\xe7\x30\x3a\x66\x67\xeb\x80\xa9\x5d\x8d\xf6\xd3\x80\xf3\xdd\xc3\x6b\x31\x8a\xcf\xe2\x19\xff\x7a\x66\xfd\x63\xaf\x7f\x27\xd7\x9b\x1d\xe3\x14\x15\x45\x12\x2f\x92\x78\x8c\xaa\x47\xcf\x0b\x08\x3b\x8c\x08\x5c\x67\xf3\x7e\xbe\x03\x00\x00\xff\xff\xec\x6e\x86\x03\xa8\x03\x00\x00")

func dbMigrations0001_init_dbUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbUpSql,
		"db/migrations/0001_init_db.up.sql",
	)
}

func dbMigrations0001_init_dbUpSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.up.sql", size: 936, mode: os.FileMode(420), modTime: time.Unix(1462987513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_init_db.down.sql": dbMigrations0001_init_dbDownSql,
	"db/migrations/0001_init_db.up.sql": dbMigrations0001_init_dbUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_init_db.down.sql": &bintree{dbMigrations0001_init_dbDownSql, map[string]*bintree{}},
			"0001_init_db.up.sql": &bintree{dbMigrations0001_init_dbUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

