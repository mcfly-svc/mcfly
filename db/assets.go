// Code generated by go-bindata.
// sources:
// db/migrations/0001_init_db.down.sql
// db/migrations/0001_init_db.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_init_dbDownSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\xcd\x0a\xc2\x30\x10\x84\xef\x7d\x8a\xbc\x47\x4e\x4a\x2b\x14\x44\x8b\xed\xa1\x9e\x96\x98\x2c\x18\xed\x4f\xc8\x26\x05\xdf\x5e\x9b\x46\xf0\x90\xe0\x25\x04\xe6\x9b\x9d\x99\xf2\x72\x6e\x58\x7d\x2a\xab\x9e\xd5\x07\x56\xf5\x75\xdb\xb5\xcc\xd8\xf9\x81\xd2\x01\xa1\x5d\xb4\x44\xf0\x9f\xcf\x24\x46\x84\xf5\xe1\x45\xce\xb3\x68\x85\x56\x48\x89\x44\x6e\x7e\xe2\x14\x7c\x79\x3c\x44\xdc\xc5\xa4\x06\x84\xaf\x9b\x17\x1b\xde\xed\xf6\xc7\xea\x07\xbf\x79\x3d\x28\x9e\xd6\xd6\x14\x88\xf7\x32\xc8\x5f\x35\x84\xc3\xd6\x1d\x42\xf9\x0c\x3b\x0a\x4b\xde\xe8\x38\x2d\x32\xd7\x26\x75\x8e\x27\xd5\xb0\x04\x14\x9a\x61\x7e\x01\x39\xe1\x3c\xf1\xe2\x1d\x00\x00\xff\xff\x90\xb6\x18\x6f\x86\x01\x00\x00")

func dbMigrations0001_init_dbDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbDownSql,
		"db/migrations/0001_init_db.down.sql",
	)
}

func dbMigrations0001_init_dbDownSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.down.sql", size: 390, mode: os.FileMode(420), modTime: time.Unix(1463506999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_init_dbUpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xcd\x8e\xda\x30\x10\x3e\x27\x4f\x31\xb7\x04\x29\x6f\xd0\x53\x1a\x5c\x09\x75\x37\xdd\x06\x90\xca\xc9\x32\xb1\x0b\x86\xe0\x44\xfe\x41\xf4\xed\x6b\xe7\x3f\x90\xa2\xae\x44\x4e\xce\xcc\xf8\xfb\x99\x19\x27\x19\x8a\x37\x08\x36\xbb\x0f\x04\x95\x2c\xaf\x9c\x32\x09\xf1\x1a\x50\xba\x7d\x87\x30\x38\x70\x7d\x34\xfb\x20\x82\x80\xca\xb2\xda\x97\x37\x77\xd4\x92\x5c\xb9\x72\xa7\x13\x13\x67\x2e\x54\xb0\xf8\xe2\x8f\x81\xf6\x86\x17\x14\x53\x56\x15\xe5\x1f\xac\x34\xd1\x46\x75\x98\x61\xa0\x4c\x9e\x33\x46\x19\x75\x00\x15\x13\x94\x8b\x83\x3b\xfe\x26\xbc\xb0\x41\x0b\xd5\x63\xc5\x5f\xdf\x10\x5c\x88\x54\xa6\xe2\xd8\x28\xab\x2c\xf4\x3d\x4e\xbd\xe1\xb3\x31\x4e\x0a\xf8\xc8\x56\xef\x71\xb6\x83\xef\x68\x17\xf9\x9e\x20\x17\x36\x94\x68\x76\xd3\x36\x48\x2c\xab\x52\x58\x97\x67\x26\x86\x84\xff\x40\xd7\x35\x01\x8f\x2f\x38\xde\x2e\xd1\xe1\x76\xff\xd1\x90\xaa\x35\x3a\x76\x98\xe7\x85\xb1\x22\xf0\x5c\x35\x1e\xd9\xe1\x42\xb3\x83\x35\x99\xa1\x6f\x28\x43\x69\x82\xd6\x13\xf3\x21\xa7\x0b\xf8\x91\xc2\x12\xbd\x21\x2b\x37\x89\xd7\x49\xbc\x44\xfe\xd0\xfb\x6d\xba\xfa\xb9\x45\xb0\x4a\x97\xe8\x57\xef\xa3\xe1\xaf\xe9\x9b\x16\x5a\x84\x7f\x78\xec\x1d\x41\xab\x6c\xae\x39\x27\x96\xeb\xff\x1b\xc3\x91\x08\x5a\xb0\xfb\x39\xa8\xd2\xc8\x9c\x61\x23\x8b\xd9\xf8\xa4\xcb\xdd\xcf\x13\x8f\x4e\x0e\x6e\x98\xfa\xbb\xad\xc5\x46\x69\x93\x8b\xe0\x0e\xff\xc1\x5a\xbd\xb3\x9f\x31\x06\xf7\xce\x3a\x35\x3d\xc0\xcc\x3c\xdb\x9a\xf9\x51\x5a\x8c\xe9\x9b\xa9\x51\x66\x1e\xd3\x64\xe5\x64\x01\x00\x4f\x16\xba\x9e\xe5\x68\x70\x2f\xd9\xba\x17\xd9\x1d\xf5\x15\xc2\x56\x58\x04\x03\xf2\xc2\xd9\xf9\x1b\x00\x00\xff\xff\x55\x8b\x3e\x17\xa3\x04\x00\x00")

func dbMigrations0001_init_dbUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbUpSql,
		"db/migrations/0001_init_db.up.sql",
	)
}

func dbMigrations0001_init_dbUpSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.up.sql", size: 1187, mode: os.FileMode(420), modTime: time.Unix(1463587352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_init_db.down.sql": dbMigrations0001_init_dbDownSql,
	"db/migrations/0001_init_db.up.sql": dbMigrations0001_init_dbUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_init_db.down.sql": &bintree{dbMigrations0001_init_dbDownSql, map[string]*bintree{}},
			"0001_init_db.up.sql": &bintree{dbMigrations0001_init_dbUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

