// Code generated by go-bindata.
// sources:
// db/migrations/0001_init_db.down.sql
// db/migrations/0001_init_db.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_init_dbDownSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\xcd\x0a\xc2\x30\x10\x84\xef\x7d\x8a\xbc\x47\x4e\x4a\x2b\x14\x44\x8b\xed\xa1\x9e\x96\x98\x2c\x18\xed\x4f\xc8\x26\x05\xdf\x5e\x9b\x46\xf0\x90\xe0\x25\x04\xe6\x9b\x9d\x99\xf2\x72\x6e\x58\x7d\x2a\xab\x9e\xd5\x07\x56\xf5\x75\xdb\xb5\xcc\xd8\xf9\x81\xd2\x01\xa1\x5d\xb4\x44\xf0\x9f\xcf\x24\x46\x84\xf5\xe1\x45\xce\xb3\x68\x85\x56\x48\x89\x44\x6e\x7e\xe2\x14\x7c\x79\x3c\x44\xdc\xc5\xa4\x06\x84\xaf\x9b\x17\x1b\xde\xed\xf6\xc7\xea\x07\xbf\x79\x3d\x28\x9e\xd6\xd6\x14\x88\xf7\x32\xc8\x5f\x35\x84\xc3\xd6\x1d\x42\xf9\x0c\x3b\x0a\x4b\xde\xe8\x38\x2d\x32\xd7\x26\x75\x8e\x27\xd5\xb0\x04\x14\x9a\x61\x7e\x01\x39\xe1\x3c\xf1\xe2\x1d\x00\x00\xff\xff\x90\xb6\x18\x6f\x86\x01\x00\x00")

func dbMigrations0001_init_dbDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbDownSql,
		"db/migrations/0001_init_db.down.sql",
	)
}

func dbMigrations0001_init_dbDownSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.down.sql", size: 390, mode: os.FileMode(420), modTime: time.Unix(1463506999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_init_dbUpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xcd\x8e\xaa\x30\x14\x5e\xc3\x53\x9c\x1d\x98\xf0\x06\x77\xc5\xc5\xde\xc4\x5c\x65\x1c\xd4\x64\x5c\x35\x95\x76\xb4\x8a\x85\xd0\xd6\x38\x6f\x3f\x2d\xff\x2a\x33\x99\x49\x64\x55\xce\x69\xbf\x9f\xf3\xb5\x51\x82\xc2\x35\x82\xf5\x76\x89\xa0\x28\xf3\x0b\xa7\xac\x84\x70\x05\x28\xde\x2c\xc0\xf7\xf6\x5c\x1d\xf4\xce\x0b\xc0\xa3\x65\x5e\xec\xf2\xab\x5d\xaa\x92\x5c\xb8\xb4\xab\x23\x13\x27\x2e\xa4\x37\xf9\xe3\x0e\x81\x76\x9a\x67\x14\x53\x56\x64\xf9\x07\x96\x8a\x28\x2d\x5b\x4c\xdf\x93\x3a\x4d\x19\xa3\x8c\x5a\x80\x82\x09\xca\xc5\xde\x2e\xdf\x09\xcf\x4c\xd1\x40\x75\x58\xe1\xdf\x39\x82\x33\x29\xa5\x2e\x38\xd6\xd2\x28\xf3\x5d\x87\x53\xa7\xff\x4c\x8d\x93\x0c\x96\xc9\x6c\x11\x26\x5b\xf8\x8f\xb6\x81\xeb\x08\x72\x66\xfd\x16\xc5\xae\xca\x14\x89\x61\x95\x12\xab\xfc\xc4\x44\xdf\x70\x1f\xe8\xda\x21\xe0\xe1\x01\xcb\xdb\x36\x5a\xdc\xf6\x3f\xe8\x5b\x95\x46\xcb\x0e\xe3\xbc\x30\x54\x04\x8e\xdd\x8d\x07\x76\xb8\x50\x6c\x6f\x4c\x26\xe8\x1f\x4a\x50\x1c\xa1\xd5\x8d\x79\x9f\xd3\x09\xbc\xc4\x30\x45\x73\x64\xe4\x46\xe1\x2a\x0a\xa7\xc8\xed\x67\xbf\x89\x67\xaf\x1b\x04\xb3\x78\x8a\xde\x3a\x1f\x35\x7f\x45\x5f\x8f\xd0\x20\x7c\xe1\xb1\x73\x04\x8d\xb2\xb1\xe1\x1c\x59\xaa\x7e\x16\xc3\x81\x08\x9a\xb1\xfb\x1c\x64\xae\xcb\x94\x61\x5d\x66\xa3\xf5\x9b\x29\xb7\x3f\xdf\x78\xb4\x72\x70\xcd\xd4\x9d\x6d\x2c\xd6\x4a\xeb\x5e\x00\x77\xf8\x0f\xd6\xaa\x3b\xfb\x1b\x63\x70\xef\xac\x55\xd3\x01\x8c\xe4\xd9\xec\x19\x8f\xd2\x60\xdc\xbe\x99\x0a\x65\xe4\x31\x3d\xde\xda\x2a\xb0\x41\x3a\x4f\xb9\x5a\x4f\xf2\x34\x18\x1e\xf8\x8d\xb0\x00\x7a\xe4\x89\xb5\xf3\x19\x00\x00\xff\xff\xed\xde\x4f\x05\x88\x04\x00\x00")

func dbMigrations0001_init_dbUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_init_dbUpSql,
		"db/migrations/0001_init_db.up.sql",
	)
}

func dbMigrations0001_init_dbUpSql() (*asset, error) {
	bytes, err := dbMigrations0001_init_dbUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_init_db.up.sql", size: 1160, mode: os.FileMode(420), modTime: time.Unix(1463507195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_init_db.down.sql": dbMigrations0001_init_dbDownSql,
	"db/migrations/0001_init_db.up.sql": dbMigrations0001_init_dbUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_init_db.down.sql": &bintree{dbMigrations0001_init_dbDownSql, map[string]*bintree{}},
			"0001_init_db.up.sql": &bintree{dbMigrations0001_init_dbUpSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

